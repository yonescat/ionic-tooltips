{"version":3,"file":"tooltip-box.component.js","sourceRoot":"","sources":["../src/tooltip-box.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,qBAAqB,CAAC;AACjF,OAAO,EAEL,uBAAuB,EACvB,SAAS,EACT,UAAU,EACV,WAAW,EACX,KAAK,EACL,SAAS,GACV,MAAM,eAAe,CAAC;;IA2ErB,oBAAmB,UAAsB,EAAU,GAAc;QAAjE,iBAIC;QAJkB,eAAU,GAAV,UAAU,CAAY;QAAU,QAAG,GAAH,GAAG,CAAW;yBAhCvB,WAAW;QAiCnD,IAAI,CAAC,IAAI,GAAG,IAAI,OAAO,CAAO,UAAA,OAAO;YACnC,KAAI,CAAC,WAAW,GAAG,OAAO,CAAC;SAC5B,CAAC,CAAC;KACJ;0BA9BG,6BAAK;uBAAC,IAAY;YACpB,IAAI,CAAC,GAAG,CAAC,YAAY,CACnB,IAAI,CAAC,gBAAgB,EAAE,EACvB,OAAO,EACP,YAAY,GAAG,QAAQ,GAAG,IAAI,CAC/B,CAAC;;;;;0BAIA,8BAAM;uBAAC,GAAW;YACpB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,KAAK,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;;;;;0BAI5D,+BAAO;uBAAC,GAAW;YACrB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,MAAM,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;;;;;IAGjE,qCAAgB,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;KACtC;IAYD,oCAAe,GAAf;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;KACpB;;gBAjFF,SAAS,SAAC;oBACT,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,mIAGT;oBACD,UAAU,EAAE;wBACV,OAAO,CAAC,MAAM,EAAE;4BACd,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;4BACvC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;4BACzC,UAAU,CAAC,uBAAuB,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC;yBAC7D,CAAC;qBACH;oBACD,MAAM,EAAE;wBACJ,mQASD;wBACC,yNAQD;wBACD,4FAA4F;wBAC5F,6FAA6F;wBAC7F,8FAA8F;wBAC9F,+FAA+F;qBAChG;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;;;gBA7CC,UAAU;gBAGV,SAAS;;;8BA4CR,WAAW,SAAC,OAAO;yBAEnB,KAAK;gCACL,KAAK;0BAEL,KAAK;2BASL,KAAK;4BAKL,KAAK;;qBAvER;;SAmDa,UAAU","sourcesContent":["import { animate, state, style, transition, trigger } from '@angular/animations';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  Renderer2,\n} from '@angular/core';\n\n@Component({\n  selector: 'tooltip-box',\n  template: `\n    <div *ngIf=\"tooltipHtml; else txt\" [innerHTML]=\"tooltipHtml\"></div>\n    <ng-template #txt>{{ text }}</ng-template>\n  `,\n  animations: [\n    trigger('fade', [\n      state('visible', style({ opacity: 1 })),\n      state('invisible', style({ opacity: 0 })),\n      transition('visible <=> invisible', animate('300ms linear')),\n    ]),\n  ],\n  styles: [\n      `\n          :host {\n              background-color: rgba(0, 0, 0, 0.8);\n              color: white;\n              display: inline-block;\n              position: fixed;\n              padding: 15px 25px;\n              font-size: 15px;\n          }\n    `,\n      `\n          :host.has-arrow:before {\n              content: '';\n              border: 5px solid transparent;\n              position: absolute;\n              width: 0;\n              height: 0;\n          }\n    `,\n    ':host.has-arrow.arrow-top:before { border-bottom: 5px solid rgba(0,0,0,0.8); top: -10px; }',\n    ':host.has-arrow.arrow-left:before { border-right: 5px solid rgba(0,0,0,0.8); left: -10px; }',\n    ':host.has-arrow.arrow-right:before { border-left: 5px solid rgba(0,0,0,0.8); right: -10px; }',\n    ':host.has-arrow.arrow-bottom:before { border-top: 5px solid rgba(0,0,0,0.8); bottom: -10px; }',\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TooltipBox implements AfterViewInit {\n  @HostBinding('@fade') fadeState: string = 'invisible';\n\n  @Input() text: string;\n  @Input() tooltipHtml: string;\n\n  @Input()\n  set arrow(side: string) {\n    this.rnd.setAttribute(\n      this.getNativeElement(),\n      'class',\n      'has-arrow ' + 'arrow-' + side,\n    );\n  }\n\n  @Input()\n  set posTop(val: number) {\n    this.rnd.setStyle(this.getNativeElement(), 'top', val + 'px');\n  }\n\n  @Input()\n  set posLeft(val: number) {\n    this.rnd.setStyle(this.getNativeElement(), 'left', val + 'px');\n  }\n\n  getNativeElement(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  init: Promise<void>;\n\n  private initResolve: Function;\n\n  constructor(public elementRef: ElementRef, private rnd: Renderer2) {\n    this.init = new Promise<void>(resolve => {\n      this.initResolve = resolve;\n    });\n  }\n\n  ngAfterViewInit() {\n    this.initResolve();\n  }\n}\n"]}